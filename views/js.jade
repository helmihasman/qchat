// jQuery
script(src='../../gentelella/vendors/jquery/dist/jquery.min.js')
// Bootstrap
script(src='../../gentelella/vendors/bootstrap/dist/js/bootstrap.min.js')
// FastClick
script(src='../../gentelella/vendors/fastclick/lib/fastclick.js')
// NProgress
script(src='../../gentelella/vendors/nprogress/nprogress.js')
// Chart.js
script(src='../../gentelella/vendors/Chart.js/dist/Chart.min.js')
// gauge.js
script(src='../../gentelella/vendors/bernii/gauge.js/dist/gauge.min.js')
// bootstrap-progressbar
script(src='../../gentelella/vendors/bootstrap-progressbar/bootstrap-progressbar.min.js')
// iCheck
script(src='../../gentelella/vendors/iCheck/icheck.min.js')
// Skycons
script(src='../../gentelella/vendors/skycons/skycons.js')
// Flot
script(src='../../gentelella/vendors/Flot/jquery.flot.js')
script(src='../../gentelella/vendors/Flot/jquery.flot.pie.js')
script(src='../../gentelella/vendors/Flot/jquery.flot.time.js')
script(src='../../gentelella/vendors/Flot/jquery.flot.stack.js')
script(src='../../gentelella/vendors/Flot/jquery.flot.resize.js')
// Flot plugins
script(src='../../gentelella/js/flot/jquery.flot.orderBars.js')
script(src='../../gentelella/js/flot/date.js')
script(src='../../gentelella/js/flot/jquery.flot.spline.js')
script(src='../../gentelella/js/flot/curvedLines.js')
// jVectorMap
script(src='../../gentelella/js/maps/jquery-jvectormap-2.0.3.min.js')
// bootstrap-daterangepicker
script(src='../../gentelella/js/moment/moment.min.js')
script(src='../../gentelella/js/datepicker/daterangepicker.js')
// Custom Theme Scripts
script(src='../../gentelella/build/js/custom.min.js')
// Datatables
script(src='../../gentelella/vendors/datatables.net/js/jquery.dataTables.min.js')
script(src='../../gentelella/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js')
script(src='../../gentelella/vendors/datatables.net-buttons/js/dataTables.buttons.min.js')
script(src='../../gentelella/vendors/datatables.net-buttons-bs/js/buttons.bootstrap.min.js')
script(src='../../gentelella/vendors/datatables.net-buttons/js/buttons.flash.min.js')
script(src='../../gentelella/vendors/datatables.net-buttons/js/buttons.html5.min.js')
script(src='../../gentelella/vendors/datatables.net-buttons/js/buttons.print.min.js')
script(src='../../gentelella/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js')
script(src='../../gentelella/vendors/datatables.net-keytable/js/dataTables.keyTable.min.js')
script(src='../../gentelella/vendors/datatables.net-responsive/js/dataTables.responsive.min.js')
script(src='../../gentelella/vendors/datatables.net-responsive-bs/js/responsive.bootstrap.js')
script(src='../../gentelella/vendors/datatables.net-scroller/js/datatables.scroller.min.js')
script(src='../../gentelella/vendors/jszip/dist/jszip.min.js')
script(src='../../gentelella/vendors/pdfmake/build/pdfmake.min.js')
script(src='../../gentelella/vendors/pdfmake/build/vfs_fonts.js')

script(src='gentelella/vendors/ion.rangeSlider/js/ion.rangeSlider.min.js')

script(type='text/javascript').
  function goBack() {
    window.history.back();
    }
    
script(type='text/javascript').
  function goHome() {
    window.location.href = '/';
    }
    
script(type='text/javascript').
  function select_month(selectObject) {
    $("#att_btn").click();
    }
  

script.
 $(document).ready(function() {
     $('#datatable').DataTable();
    } );
 $(document).ready(function() {
     $('#datatable2').DataTable();
    } );
 
script.
 function simcard_bind(){
    document.getElementById("sim_card").readOnly = false;
    document.getElementById("simcard_bind").style.display = "none";
 }
script.
 function email_bind(){
    document.getElementById("email").readOnly = false;
    document.getElementById("email_bind").style.display = "none";
 }
    
// Ion.RangeSlider
script.
  $(document).ready(function() {
    
    $("#range_31").ionRangeSlider({
        type: "double",
        min: 0,
        max: 100,
        from: 30,
        to: 70,
        from_fixed: true
    });

  });
// /Ion.RangeSlider
// Bootstrap Colorpicker
     
script(src='http://maps.google.cn/maps/api/js?key=AIzaSyDdtF6BnY-mKqQmaOIyLVy-rrCI_jJGkDs&libraries=drawing')


script.
    var showMaps = function() {
        
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {

            map_g = new google.maps.Map(document.getElementById('googleMapArea'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            
            //map_g.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_g.data);
            
            loadPolygons(map_g);  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons(map_g) {
                var data = JSON.parse(localStorage.getItem('geoData'));
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                  
                map_g.data.addGeoJson(data);
            }

            function savePolygon() {
                //console.log("mapp11-- "+map.data);
                
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_g.data.toGeoJson(function (json) {
                    //alert("save name here");
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    for (var i = 0; i < json.features.length; i++) {
                        console.log(json.features[i].geometry.coordinates);
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":"Area "+(i+1)},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    document.getElementById("map_string").value = JSON.stringify(jsonstring);
                    $("#confirm_btn").click();
                    initControls(jsonstring);
                });
            }
            
            function initControls(data)
            {
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                console.log("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }

                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    localStorage.setItem('geoData', JSON.stringify(data));
                    initControls(data);  
                    loadPolygons(map_g);   
                };
            }

    //}
    };



script.
    var runMaps = function() {
       
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {

            map_g = new google.maps.Map(document.getElementById('googleMap'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            
            map_g.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_g.data);
            
            loadPolygons(map_g);  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons(map_g) {
                var data = JSON.parse(localStorage.getItem('geoData'));
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                  
                map_g.data.addGeoJson(data);
            }

            function savePolygon() {
                //console.log("mapp11-- "+map.data);
                
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_g.data.toGeoJson(function (json) {
                    //alert("save name here");
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    for (var i = 0; i < json.features.length; i++) {
                        console.log(json.features[i].geometry.coordinates);
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":"Area "+(i+1)},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    document.getElementById("map_string").value = JSON.stringify(jsonstring);
                    $("#confirm_btn").click();
                    initControls(jsonstring);
                });
            }
            
            function initControls(data)
            {
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                console.log("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }

                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    localStorage.setItem('geoData', JSON.stringify(data));
                    initControls(data);  
                    loadPolygons(map_g);   
                };
            }
            
    
    //}
    };
    
script.
    function clearMap() {
       for(var l=0;l<maps.length;l++){
           maps[l].eachLayer(function (layer) {
                maps[l].removeLayer(markers);
                
            });
        for(i in maps[l]._layers) {
            if(maps[l]._layers[i]._path !== undefined) {
                try {
                    maps[l].removeLayer(maps[l]._layers[i]);
                }
                catch(e) {
                    console.log("problem with " + e + maps[l]._layers[i]);
                }
            }
        }
      }
    }

    
script.
    function doalert(checkboxElem) {
        $('.subject-list').on('change', function() {
            $('.subject-list').not(this).prop('checked', false);  
        });
       var html='';
       var pointlist = [];
        
        if (checkboxElem.checked) {
            
            for(var h=0;h<dd.length;h++){ 
                document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                markers.clearLayers();
                
            }
            
            var emp_id = checkboxElem.value;
            
            for(var i=0;i<dd.length;i++){
                var num = dd[i].employee_id.toString();
                //alert("form 1-- "+emp_id);
                  var d = new Date(dd[i].path_datetime);
                  //d.setMinutes(d.getMinutes()+d.getTimezoneOffset());
                  var ddate = d.getDate();
                  var dmonth = d.getMonth()+1;
                  var dyear = d.getFullYear();
                  var dhour = d.getHours();
                  var dminutes = d.getMinutes();
                  var dseconds = d.getSeconds();

                  if(ddate < 10){
                      ddate = "0"+ddate;
                  }
                  if(dmonth < 10){
                      dmonth = "0"+dmonth;
                  }

                  if(dhour < 10){
                      dhour = "0"+dhour;
                  }
                  if(dminutes < 10){
                      dminutes = "0"+dminutes;
                  }
                  if(dseconds < 10){
                      dseconds = "0"+dseconds;
                  }



                  //mhuman = JSON.parse(floorplan);
                  //alert("floorplan-- "+floorplan);
                  mhuman = floorplan_list;
                  for(var j=0;j<maps.length;j++){
                  for (k in mhuman[j]) {
                      
                  var newdate = ddate+"/"+dmonth+"/"+dyear+" "+dhour+":"+dminutes+":"+dseconds;
                  //console.log("num--- "+num);
                  //console.log("emp_id--- "+emp_id);
                  //console.log("dd["+i+"].location_id--- "+dd[i].location_id);
                  //console.log("mhuman["+k+"].popup--- "+mhuman[k].popup);
                if(num === emp_id){

                      man = {
                          x: mhuman[j][k].latlngs.lat,
                          y: mhuman[j][k].latlngs.lng
                        };

                      human1 = L.divIcon({
                          className: 'checkpoint-pin',
                          html: '<img src="/images/man.png">',
                          iconSize: [15, 15],
                          iconAnchor: [10, 10]
                        });

                    //alert(emp_id+"---"+dd[i].employee_id+"---"+mhuman[j][k].popup+"---"+dd[i].location_id);
                    
                    if(dd[i].location_id === mhuman[j][k].popup){
                        //alert(j);
                        console.log(dd[i].location_id+" -- "+mhuman[j][k].popup);
                        //var random = Math.floor(Math.random() * 10) + 1; 
                        //console.log("random--"+random);
                        //alert("in 1 i="+i+" k="+k);
                          var marker = L.marker([man.x, man.y], {
                            icon: human1
                          });

                          markers.addLayer(marker);
                          pointlist.push([man.x, man.y]);
                          //console.log("pointlist11--"+pointlist);
                          //drawPolyline();
                          
                          html += '<li><a href="#step-1"><span class="step_no">'+dd[i].location_id+'</span><span class="step_descr">'+dd[i].employee_id+'<br/><small>'+newdate+'</small></span></a></li>';
                          
                         
                          maps[j].addLayer(markers);
                         
                          document.getElementById("wizard_steps").innerHTML = html;
                        

                          /*L.polyline(pointlist, {
                                color: 'red',
                                weight: 3,
                                opacity: 0.5,
                                smoothFactor: 1
                            }).addTo(maps[j]);*/
                    }

                }

                  }
                  
                  
          }
            }

        } else {

            for(var i=0;i<maps.length;i++){ 
                
                document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                markers.clearLayers();
                
            }

        }
      }
 

