// jQuery
script(src='../../../gentelella/vendors/jquery/dist/jquery.min.js')
// Bootstrap
script(src='../../../gentelella/vendors/bootstrap/dist/js/bootstrap.min.js')
// FastClick
script(src='../../../gentelella/vendors/fastclick/lib/fastclick.js')
// NProgress
script(src='../../../gentelella/vendors/nprogress/nprogress.js')
// Chart.js
script(src='../../../gentelella/vendors/Chart.js/dist/Chart.min.js')
// gauge.js
script(src='../../../gentelella/vendors/bernii/gauge.js/dist/gauge.min.js')
// bootstrap-progressbar
script(src='../../../gentelella/vendors/bootstrap-progressbar/bootstrap-progressbar.min.js')
// iCheck
script(src='../../../gentelella/vendors/iCheck/icheck.min.js')
// Skycons
script(src='../../../gentelella/vendors/skycons/skycons.js')
// Flot
script(src='../../../gentelella/vendors/Flot/jquery.flot.js')
script(src='../../../gentelella/vendors/Flot/jquery.flot.pie.js')
script(src='../../../gentelella/vendors/Flot/jquery.flot.time.js')
script(src='../../../gentelella/vendors/Flot/jquery.flot.stack.js')
script(src='../../../gentelella/vendors/Flot/jquery.flot.resize.js')
// Flot plugins
script(src='../../../gentelella/js/flot/jquery.flot.orderBars.js')
script(src='../../../gentelella/js/flot/date.js')
script(src='../../../gentelella/js/flot/jquery.flot.spline.js')
script(src='../../../gentelella/js/flot/curvedLines.js')
// jVectorMap
script(src='../../../gentelella/js/maps/jquery-jvectormap-2.0.3.min.js')
// bootstrap-daterangepicker
script(src='../../../gentelella/js/moment/moment.min.js')
script(src='../../../gentelella/js/datepicker/daterangepicker.js')
// Custom Theme Scripts
script(src='../../../gentelella/build/js/custom.min.js')
// Datatables
script(src='../../../gentelella/vendors/datatables.net/js/jquery.dataTables.min.js')
script(src='../../../gentelella/vendors/datatables.net-bs/js/dataTables.bootstrap.min.js')
script(src='../../../gentelella/vendors/datatables.net-buttons/js/dataTables.buttons.min.js')
script(src='../../../gentelella/vendors/datatables.net-buttons-bs/js/buttons.bootstrap.min.js')
script(src='../../../gentelella/vendors/datatables.net-buttons/js/buttons.flash.min.js')
script(src='../../../gentelella/vendors/datatables.net-buttons/js/buttons.html5.min.js')
script(src='../../../gentelella/vendors/datatables.net-buttons/js/buttons.print.min.js')
script(src='../../../gentelella/vendors/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js')
script(src='../../../gentelella/vendors/datatables.net-keytable/js/dataTables.keyTable.min.js')
script(src='../../../gentelella/vendors/datatables.net-responsive/js/dataTables.responsive.min.js')
script(src='../../../gentelella/vendors/datatables.net-responsive-bs/js/responsive.bootstrap.js')
script(src='../../../gentelella/vendors/datatables.net-scroller/js/datatables.scroller.min.js')
script(src='../../../gentelella/vendors/jszip/dist/jszip.min.js')
script(src='../../../gentelella/vendors/pdfmake/build/pdfmake.min.js')
script(src='../../../gentelella/vendors/pdfmake/build/vfs_fonts.js')


script(src='gentelella/vendors/ion.rangeSlider/js/ion.rangeSlider.min.js')

script(type='text/javascript').
  function goBack() {
    window.history.back();
    }
    
script(type='text/javascript').
  function goHome() {
    window.location.href = '/';
    }
    
script(type='text/javascript').
  function select_month(selectObject) {
    $("#att_btn").click();
    }
  

script.
 $(document).ready(function() {
     $('#datatable').DataTable( {
        "language": {
            "processing":   "處理中...",
            "loadingRecords": "載入中...",
            "lengthMenu": "顯示 _MENU_ 項結果",
            "zeroRecords": "沒有符合的結果",
            "info": "顯示第 _START_ 至 _END_ 項結果，共 _TOTAL_ 項",
            "infoEmpty": "顯示第 0 至 0 項結果，共 0 項",
            "infoFiltered": "(從 _MAX_ 項結果中過濾)",
            "infoPostFix":  "",
            "search":       "搜尋:",
            "paginate": {
                "first":    "第一頁",
                "previous": "上一頁",
                "next":     "下一頁",
                "last":     "最後一頁"
            },
            "aria": {
                "sortAscending":  ": 升冪排列",
                "sortDescending": ": 降冪排列"
            }
        }
    } );
    } );
 $(document).ready(function() {
     $('#datatable2').DataTable( {
        "language": {
            "processing":   "處理中...",
            "loadingRecords": "載入中...",
            "lengthMenu": "顯示 _MENU_ 項結果",
            "zeroRecords": "沒有符合的結果",
            "info": "顯示第 _START_ 至 _END_ 項結果，共 _TOTAL_ 項",
            "infoEmpty": "顯示第 0 至 0 項結果，共 0 項",
            "infoFiltered": "(從 _MAX_ 項結果中過濾)",
            "infoPostFix":  "",
            "search":       "搜尋:",
            "paginate": {
                "first":    "第一頁",
                "previous": "上一頁",
                "next":     "下一頁",
                "last":     "最後一頁"
            },
            "aria": {
                "sortAscending":  ": 升冪排列",
                "sortDescending": ": 降冪排列"
            }
        }
    } );
    } );
 
script.
 function simcard_bind(){
    document.getElementById("sim_card").readOnly = false;
    document.getElementById("simcard_bind").style.display = "none";
 }
script.
 function email_bind(){
    document.getElementById("email").readOnly = false;
    document.getElementById("email_bind").style.display = "none";
 }
 
script.
    function notify_click(){
    document.getElementById("notification-badge").style.display = "none";
    }
    
    
// Ion.RangeSlider
script.
  $(document).ready(function() {
    
    $("#range_31").ionRangeSlider({
        type: "double",
        min: 0,
        max: 100,
        from: 30,
        to: 70,
        from_fixed: true
    });

  });
// /Ion.RangeSlider
// Bootstrap Colorpicker
     
script(src='http://maps.google.cn/maps/api/js?key=AIzaSyDdtF6BnY-mKqQmaOIyLVy-rrCI_jJGkDs&libraries=drawing')

script.
    var companyMap = function() {
        
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {

            map_g = new google.maps.Map(document.getElementById('googleMapCompany'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            var marker;
            function placeMarker(location) {
              if ( marker ) {
                marker.setPosition(location);
              } else {
                marker = new google.maps.Marker({
                  position: location,
                  map: map_g
                });
              }

              $("#location").val(location);

            }
            google.maps.event.addListener(map_g, 'click', function(event) {
              placeMarker(event.latLng);
            });
         

           
            
            

    //}
    };
    
    
script.
    var marker_g = [];
    var infowindow = [];
    var contentString = [];
    var trackingMap = function() {
        
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {
            var data = "#{data}".replace(/&quot;/g, '"');
            var company = "#{company}".replace(/&quot;/g, '"');
            data_p = JSON.parse(data);
            //comp_p = JSON.parse(company);
            //var mystring = comp_p[0].company_location.replace('(','');
            comp_p = JSON.parse(company);
            
            map_g = new google.maps.Map(document.getElementById('googleMapTracking'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            var infowindow2 = new google.maps.InfoWindow({
                    content: contentString,
                    maxWidth: 320 
                  });
            var infoWindow = new google.maps.InfoWindow({maxWidth: 250});
            
            var marker_b = [];
            var contentString2 = [];
            
            for(var pp=0;pp<comp_p.length;pp++){
            var mystring = comp_p[pp].building_location.replace('(','');
            mystring = mystring.replace(')','');
            var splitstr = mystring.split(',');
            var latt,lonn;
            
            
            if(splitstr[0] === ''){
                latt = 23.1253491;
            }
            else{
                latt = parseFloat(splitstr[0]);
            }
            if(splitstr[1] === '' || splitstr[1] === undefined || splitstr[1] === 'undefined'){
                lonn = 112.9469622;
            }
            else{
                lonn = parseFloat(splitstr[1]);
            }
            

                contentString2[pp] = '<ul class="list-unstyled">'+
                        '<li class="media event">'+
                            '<a class="pull-left border-aero profile_thumb">'+
                              '<i class="fa fa-building aero"></i>'+
                            '</a>'+
                            '<div class="media-body">'+
                              '<a class="title" href="#">'+comp_p[pp].building_name+'</a>'+
                              '<p><b>地址:</b> '+comp_p[pp].building_add+'</p>'+
                            '</div>'+
                          '</li></ul>';
                
                var myLatLng = {lat: parseFloat(splitstr[0]), lng: parseFloat(splitstr[1])};
                marker_b[pp] = new google.maps.Marker({
                    position: myLatLng,
                    icon: '/images/skyline.png',
                    map: map_g,
                    label: comp_p[pp].building_name
                    });
                    
                    google.maps.event.addListener(marker_b[pp], 'click', (function(marker, pp) {
                    return function() {
                        infoWindow.setContent(contentString2[pp]);
                        infoWindow.open(map_g, marker_b[pp]);
                    }
                })(marker_b[pp], pp));
               
                marker_b[pp].setMap(map_g); 
            }
            
            var contentString = [];
            for(var i=0;i<data_p.length;i++){
                var d = new Date(data_p[i].employee_time);
            //    d.setMinutes(d.getMinutes()+480);
                d.setMinutes(d.getMinutes()-480);
                var ddate = d.getDate();
                var dmonth = d.getMonth()+1;
                var dyear = d.getFullYear();
                var dhour = d.getHours();
                var dminutes = d.getMinutes();
                var dseconds = d.getSeconds();


                if(ddate < 10){
                    ddate = "0"+ddate;
                }
                if(dmonth < 10){
                    dmonth = "0"+dmonth;
                }

                if(dhour < 10){
                    dhour = "0"+dhour;
                }
                if(dminutes < 10){
                    dminutes = "0"+dminutes;
                }
                if(dseconds < 10){
                    dseconds = "0"+dseconds;
                }

                var newdate;
                newdate = dyear+"-"+dmonth+"-"+ddate+" "+dhour+":"+dminutes+":"+dseconds;
                var partsOfStr = data_p[i].employee_gps.split(',');
                //alert(partsOfStr);
                contentString[i] = '<ul class="list-unstyled">'+
                        '<li class="media event">'+
                            '<a class="pull-left">'+
                              '<img src="/'+data_p[i].employee_image+'" height="40" width="40">'+
                            '</a>'+
                            '<div class="media-body">'+
                              '<a class="title" href="#">'+data_p[i].employee_name+'</a>'+
                              '<p>最后的位置: '+newdate+'</p>'+
                              '</p>'+
                            '</div>'+
                          '</li></ul>';
                
                var myLatLng = {lat: parseFloat(partsOfStr[1]), lng: parseFloat(partsOfStr[0])};
                //alert(myLatLng);
                marker_g[i] = new google.maps.Marker({
                    position: myLatLng,
                    icon: '/images/man2_1.png',
                    map: map_g,
                    label: data_p[i].employee_name
                    });

                   google.maps.event.addListener(marker_g[i], 'click', (function(marker, i) {
                    return function() {
                        infoWindow.setContent(contentString[i]);
                        infoWindow.open(map_g, marker_g[i]);
                    }
                })(marker_g[i], i));
                
                marker_g[i].setMap(map_g); 
                
            }
            //map_g.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_g.data);
            
            loadPolygons();  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons() {
                //var data = JSON.parse(localStorage.getItem('geoData'));
                var data = JSON.parse(document.getElementById("map_string_load").value) ;
                //alert(data);
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                  
                map_g.data.addGeoJson(data);
                //alert("load polygon");
            }

            function savePolygon() {
                //console.log("mapp11-- "+map.data);
                //alert("save polygon1");
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_g.data.toGeoJson(function (json) {
                    //alert("save name here");
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    for (var i = 0; i < json.features.length; i++) {
                        console.log(json.features[i].geometry.coordinates);
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":"Area "+(i+1)},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    
                    initControls(jsonstring);
                });
            }
            
            function initControls(data)
            {
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                console.log("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }

                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    localStorage.setItem('geoData', JSON.stringify(data));
                    initControls(data);  
                    loadPolygons(map_g);   
                };
            }

    //}
    };

script.
    var showMaps = function() {
        
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {

            map_k = new google.maps.Map(document.getElementById('googleMapArea'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            
            //map_k.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_k.data);
            
            loadPolygons();  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons() {
                //var data = JSON.parse(localStorage.getItem('geoData'));
                data = JSON.parse(document.getElementById("map_string_load").value) ;
                //alert("llll-- "+JSON.stringify(data));
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                map_g.data.addGeoJson(data);
            }

        function savePolygon() {
                //console.log("mapp11-- "+map.data);
                //alert("save polygon1");
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_k.data.toGeoJson(function (json) {
                    //alert("save name here");
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    for (var i = 0; i < json.features.length; i++) {
                        console.log(json.features[i].geometry.coordinates);
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":"Area "+(i+1)},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    
                    initControls(jsonstring);
                    alert("save polygon2");
                });
            }
            
        function initControls(data)
            {
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                alert("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }

                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    localStorage.setItem('geoData', JSON.stringify(data));
                    initControls(data);
                    loadPolygons(map_k);   
                };
            }

    //}
    };

script.
    var runMaps2 = function() {
       
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {
            var data;
            map_g = new google.maps.Map(document.getElementById('googleMapArea'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            
            //map_g.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_g.data);
            
            loadPolygons();  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons() {
                //var data = JSON.parse(localStorage.getItem('geoData'));
                data = JSON.parse(document.getElementById("map_string_load").value) ;
                //alert("llll-- "+JSON.stringify(data));
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                map_g.data.addGeoJson(data);
            }

            function savePolygon() {
                //alert("mapp11-- "+map_g.data);
                
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 var polyname;
                
                 /*if(data !== undefined){
                    for (var i = 0; i < data.features.length; i++) {
                        alert("--------1 "+JSON.stringify(data.features[i].geometry));
                        //alert("-------- "+json.features[i].geometry.coordinates);
                        //polyname = data.features[i].geometry.polyname;
                        
                        polyname = data.features[i].geometry.polyname;
                        
                        coord = data.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":polyname},"properties":{}});
                    }
                }*/
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_g.data.toGeoJson(function (json) {
                    //alert("sjon -- "+JSON.stringify(json));
                    //alert("sdata -- "+JSON.stringify(data));
                    //alert("sjon -- "+JSON.stringify(data));
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    
                    for (var i = 0; i < json.features.length; i++) {
                        
                        if(data !== undefined){
                            //alert("iii -- "+i);
                            
                            //alert("iii json -- "+json.features[i].geometry.polyname);
                            //alert("iii data -- "+JSON.stringify(data));
                            //alert("iii data features -- "+JSON.stringify(data.features[i]));
                            //alert("iii data f geo -- "+JSON.stringify(data.features[i].geometry));
                            
                                if(data.features[i] === undefined){
                                    /*if(json.features[i].geometry.polyname === undefined){
                                        polyname = prompt("Enter polygon name1:", "");
                                        }
                                        else{
                                            polyname = json.features[i].geometry.polyname;
                                        }*/
                                  }
                                  else{
                                      //alert("inhere");
                                      json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                                  }
                               
                                //alert("-------- "+json.features[i].geometry.coordinates);
                                
                            //json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                            
                        }
                        
                        //alert("--------2  "+JSON.stringify(json.features[i].geometry));
                         
                        if(json.features[i].geometry.polyname === undefined){

                            polyname = prompt("请输入电子栏杆区域名:", "");
                            }
                            else{
                                polyname = json.features[i].geometry.polyname;
                        }
                        
                        
                        //json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                        
                        //polyname = json.features[i].geometry.polyname;
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":polyname},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    //localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    document.getElementById("map_string").value = JSON.stringify(jsonstring);
                    $("#confirm_btn").click();
                    initControls(jsonstring);
                    
                });
            }
            
            function initControls(data)
            {
                
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                console.log("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }
                
                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    //localStorage.setItem('geoData', JSON.stringify(data));
                    document.getElementById("map_string").value = JSON.stringify(data);
                    $("#confirm_btn").click();
                    initControls(data);  
                    loadPolygons();
                    //window.location.reload();
                };
                
            }
           
    
    //}
    };
    
    
script.
    var runMaps = function() {
       
    //if (navigator.geolocation) {
        //navigator.geolocation.getCurrentPosition(function(position) {
            var data;
            map_g = new google.maps.Map(document.getElementById('googleMap'), {
                center: {
                    //lat: position.coords.latitude,
                    //lng: position.coords.longitude
                    lat: 23.1253491,
                    lng: 112.9469622
                },
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false
            });
            
            
            map_g.data.setControls(['Polygon']);
            
            bindDataLayerListeners(map_g.data);
            
            loadPolygons();  //load saved data
            
            function bindDataLayerListeners(dataLayer) {
                dataLayer.addListener('addfeature', savePolygon);
                dataLayer.addListener('removefeature', savePolygon);
                //dataLayer.addListener('setgeometry', savePolygon);
            }

            

        //});
        function loadPolygons() {
                //var data = JSON.parse(localStorage.getItem('geoData'));
                data = JSON.parse(document.getElementById("map_string").value) ;
                //alert("llll-- "+JSON.stringify(data));
                map_g.data.forEach(function (f) {
                    map_g.data.remove(f);
                });
                map_g.data.addGeoJson(data);
            }

            function savePolygon() {
                //alert("mapp11-- "+map_g.data);
                
                //var polyname = prompt("Enter polygon name:", "");
                 var coord;
                 var features = [];
                 var polyname;
                
                 /*if(data !== undefined){
                    for (var i = 0; i < data.features.length; i++) {
                        alert("--------1 "+JSON.stringify(data.features[i].geometry));
                        //alert("-------- "+json.features[i].geometry.coordinates);
                        //polyname = data.features[i].geometry.polyname;
                        
                        polyname = data.features[i].geometry.polyname;
                        
                        coord = data.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":polyname},"properties":{}});
                    }
                }*/
                 //map.bindPopup("<div>This is a polygon</div>" + polygonPopUpButtons);
                map_g.data.toGeoJson(function (json) {
                    //alert("sjon -- "+JSON.stringify(json));
                    //alert("sdata -- "+JSON.stringify(data));
                    //alert("sjon -- "+JSON.stringify(data));
                    //json.features[0].geometry.polyname = "testname";
                    //localStorage.setItem('geoData', JSON.stringify(json));
                    
                    for (var i = 0; i < json.features.length; i++) {
                        
                        if(data !== undefined){
                            //alert("iii -- "+i);
                            
                            //alert("iii json -- "+json.features[i].geometry.polyname);
                            //alert("iii data -- "+JSON.stringify(data));
                            //alert("iii data features -- "+JSON.stringify(data.features[i]));
                            //alert("iii data f geo -- "+JSON.stringify(data.features[i].geometry));
                            
                                if(data.features[i] === undefined){
                                    /*if(json.features[i].geometry.polyname === undefined){
                                        polyname = prompt("Enter polygon name1:", "");
                                        }
                                        else{
                                            polyname = json.features[i].geometry.polyname;
                                        }*/
                                  }
                                  else{
                                      //alert("inhere");
                                      json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                                  }
                               
                                //alert("-------- "+json.features[i].geometry.coordinates);
                                
                            //json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                            
                        }
                        
                        //alert("--------2  "+JSON.stringify(json.features[i].geometry));
                         
                        if(json.features[i].geometry.polyname === undefined){

                            polyname = prompt("请输入电子栏杆区域名:", "");
                            }
                            else{
                                polyname = json.features[i].geometry.polyname;
                            }
                        
                        //json.features[i].geometry.polyname = data.features[i].geometry.polyname;
                        
                        //polyname = json.features[i].geometry.polyname;
                        coord = json.features[i].geometry.coordinates;
                        features.push({"type":"Feature","geometry":{"type":"Polygon","coordinates":coord,"polyname":polyname},"properties":{}});
                    }
                    
                    var jsonstring = {"type":"FeatureCollection","features":features};
                    console.log("jsonstring-- "+JSON.stringify(jsonstring));
                    //localStorage.setItem('geoData', JSON.stringify(jsonstring));
                    document.getElementById("map_string").value = JSON.stringify(jsonstring);
                    $("#confirm_btn").click();
                    initControls(jsonstring);
                    
                });
            }
            
            function initControls(data)
            {
                var sel = document.getElementById('polyList');
                sel.options.length = 0;
                console.log("savepolygon22-- "+JSON.stringify(data));

                for (var i = 0; i < data.features.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = data.features[i].geometry.polyname;
                    opt.value = i;
                    sel.appendChild(opt);
                }
                
                document.getElementById("btnDelete").disabled = (data.features.length === 0); 
                document.getElementById("btnDelete").onclick = function(){
                    var selIdx = sel.options[sel.selectedIndex].value; //get poly index 
                    data.features.splice(parseInt(selIdx), 1);   

                    //reload 
                    //localStorage.setItem('geoData', JSON.stringify(data));
                    document.getElementById("map_string").value = JSON.stringify(data);
                    $("#confirm_btn").click();
                    initControls(data);  
                    loadPolygons();
                    //window.location.reload();
                };
                
            }
           
    
    //}
    };
    
script.
    function clearMap() {
       
       for(var l=0;l<maps.length;l++){
           maps[l].eachLayer(function (layer) {
                //maps[l].removeLayer(markers[l]);
                maps[l].removeLayer(marks[l]);
                markers[l].clearLayers();

            });

      }
    }
    
    function clearMapPlayback() {
       for(var l=0;l<maps.length;l++){
           maps[l].eachLayer(function (layer) {
               //alert("1");
               //alert(maps[l].hasLayer(markers_play[l]));
               //alert("2");
               if(maps[l].hasLayer(markers_play[l])){
                maps[l].removeLayer(markers_play[l]);
                markers_play[l].clearLayers();
               }
                //markers_play[l].clearLayers();
               
               
             
            });
            
        /*for(i in maps[l]._layers) {
            if(maps[l]._layers[i]._path !== undefined) {
                try {
                    //alert("clean2 ");
                    maps[l].removeLayer(maps[l]._layers[i]);
                }
                catch(e) {
                    console.log("problem with " + e + maps[l]._layers[i]);
                }
            }
        }*/
      }
    }
    
script.
    function refresh() {
       window.location.reload();
    }

script.
    function tracking(checkboxElem) {
        $('.subject-list').on('change', function() {
            $('.subject-list').not(this).prop('checked', false);  
        });
       var html='';
       var pointlist = [];
        
        if (checkboxElem.checked) {
            //alert(dd.length);
            //alert(dd[0].employee_location);
            for(var h=0;h<dd.length;h++){ 
                //document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                //markers.clearLayers();
            }
            
            var emp_id = checkboxElem.value;
            document.getElementById('mission_list').href='/employee_details/'+emp_id;
            var positioning = JSON.parse(laodPositioning());
            var floorplan_a = JSON.parse(loadFloorPlan());
            for(var g=0;g<floorplan_a.length;g++){
                var floorplan_list = [];
                var floorplan = floorplan_a[g].markers;
                var ff = JSON.parse(floorplan);
                floorplan_list.push(ff);
                marker = JSON.parse(floorplan);
            for(var i=0;i<positioning.length;i++){
                var num = positioning[i].employee_id.toString();
                  var d = new Date(positioning[i].employee_time);
                  //d.setMinutes(d.getMinutes()+d.getTimezoneOffset());
                  var ddate = d.getDate();
                  var dmonth = d.getMonth()+1;
                  var dyear = d.getFullYear();
                  var dhour = d.getHours();
                  var dminutes = d.getMinutes();
                  var dseconds = d.getSeconds();
                 
                  if(ddate < 10){
                      ddate = "0"+ddate;
                  }
                  if(dmonth < 10){
                      dmonth = "0"+dmonth;
                  }

                  if(dhour < 10){
                      dhour = "0"+dhour;
                  }
                  if(dminutes < 10){
                      dminutes = "0"+dminutes;
                  }
                  if(dseconds < 10){
                      dseconds = "0"+dseconds;
                  }

                  var mfloors = JSON.parse(floors);
                  //alert(mfloors.floor[0].floor_id);
                  mhuman = floorplan_list;
                  for(var j=0;j<maps.length;j++){
                  for (k in mhuman[j]) {
                  var newdate = ddate+"/"+dmonth+"/"+dyear+" "+dhour+":"+dminutes+":"+dseconds;
                  //console.log("num--- "+num);
                  //console.log("emp_id--- "+emp_id);
                  //console.log("dd["+i+"].location_id--- "+dd[i].location_id);
                  //console.log("mhuman["+k+"].popup--- "+mhuman[k].popup);
                if(num === emp_id){
                    
                      man = {
                          x: mhuman[j][k].latlngs.lat,
                          y: mhuman[j][k].latlngs.lng
                        };

                      human1 = L.divIcon({
                          className: 'checkpoint-pin',
                          html: '<img src="/images/man.png"/><p style="color:black;">'+dd[i].employee_name+' ('+newdate+')</p>',
                          iconSize: [15, 15],
                          iconAnchor: [10, 10]
                        });

                    //alert(emp_id+"---"+dd[i].employee_id+"---"+mhuman[j][k].popup+"---"+dd[i].location_id);
                   
                    if(positioning[i].employee_location === mhuman[j][k].popup){
                        //alert(j);
                        console.log(positioning[i].employee_location+" -- "+mhuman[j][k].popup);
                        //var random = Math.floor(Math.random() * 10) + 1; 
                        //console.log("random--"+random);
                        //alert("in 1 i="+i+" k="+k);
                          var marker = L.marker([man.x, man.y], {
                            icon: human1
                          });
                          
                          markers[g].bindTooltip(positioning[i].employee_name,{direction:'bottom'}).addLayer(marker);
                          pointlist.push([man.x, man.y]);
                          //console.log("pointlist11--"+pointlist);
                          //drawPolyline();
                          
                          //html += '<li><a href="#step-1"><span class="step_no">'+dd[i].employee_location+'</span><span class="step_descr">'+dd[i].employee_id+'<br/><small>'+newdate+'</small></span></a></li>';
                          
                          document.getElementById(mfloors.floor[g].floor_id).click();
                          //alert(mfloors.floor[i].floor_id);
                          maps[g].addLayer(markers[g]);
                          //document.getElementById("wizard_steps").innerHTML = html;
                        
                          /*L.polyline(pointlist, {
                                color: 'red',
                                weight: 3,
                                opacity: 0.5,
                                smoothFactor: 1
                            }).addTo(maps[j]);*/
                    }

                    }

                  }
     
            }
            }
            }
                
        } else {

            for(var i=0;i<maps.length;i++){ 
                
                //document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                //markers.clearLayers();
                
            }

        }
      }

script.
    function showAll(checkboxElem) {
        $('.subject-list').on('change', function() {
            $('.subject-list').not(this).prop('checked', false);  
        });
       var html='';
       var pointlist = [];
        
        if (checkboxElem.checked) {
            //alert(dd.length);
            //alert(dd[0].employee_location);
            for(var h=0;h<dd.length;h++){ 
                //document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                //markers.clearLayers();
                
            }
            
            
            var emp_id = checkboxElem.value;
            var positioning = JSON.parse(laodPositioning());
            for(var i=0;i<positioning.length;i++){
                var num = positioning[i].employee_id.toString();
                var name = positioning[i].employee_name.toString();
                var d = new Date(positioning[i].employee_time);
                  //d.setMinutes(d.getMinutes()+d.getTimezoneOffset());
                var ddate = d.getDate();
                var dmonth = d.getMonth()+1;
                var dyear = d.getFullYear();
                var dhour = d.getHours();
                var dminutes = d.getMinutes();
                var dseconds = d.getSeconds();

                if(ddate < 10){
                    ddate = "0"+ddate;
                }
                if(dmonth < 10){
                    dmonth = "0"+dmonth;
                }

                if(dhour < 10){
                    dhour = "0"+dhour;
                }
                if(dminutes < 10){
                    dminutes = "0"+dminutes;
                }
                if(dseconds < 10){
                    dseconds = "0"+dseconds;
                }

                var mfloors = JSON.parse(floors);
                mhuman = floorplan_list;
                for(var j=0;j<maps.length;j++){
                for (k in mhuman[j]) {
                var newdate = ddate+"/"+dmonth+"/"+dyear+" "+dhour+":"+dminutes+":"+dseconds;

                man = {
                    x: mhuman[j][k].latlngs.lat,
                    y: mhuman[j][k].latlngs.lng
                  };

                human1 = L.divIcon({
                    className: 'checkpoint-pin',
                    html: '<img src="/images/man.png"/><p style="color:black;">'+dd[i].employee_name+' ('+newdate+')</p>',
                    iconSize: [15, 15],
                    iconAnchor: [10, 10]
                  });

                if(positioning[i].employee_location === mhuman[j][k].popup){

                      var marker = L.marker([man.x, man.y], {
                        icon: human1
                      });

                markers[j].addLayer(marker);

                maps[j].addLayer(markers[j]);
                }

                }
            }
            }

        } else {

            for(var i=0;i<maps.length;i++){ 
                
                //document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                //markers.clearLayers();
                
            }

        }
      }
    
script.
    function doalert(checkboxElem) {
        $('.subject-list').on('change', function() {
            $('.subject-list').not(this).prop('checked', false);  
        });
       var html='';
       var pointlist = [];
        
        var positioning = JSON.parse(loadHistory());
        var floorplan_a = JSON.parse(loadFloorPlan());
        if (checkboxElem.checked) {
            clearMapPlayback();
            /*for(var g=0;g<floorplan_a.length;g++){
                document.getElementById("wizard_steps").innerHTML = '';
                clearMap();
                pointlist = [];
                //markers[h].clearLayers();

        }*/
            
            var emp_id = checkboxElem.value;
            
            for(var g=0;g<floorplan_a.length;g++){
                var test = [];
                var loc1 = [];
                var loc2 = [];
                var sorted = [];
                var sorted_loc1 = [];
                var sorted_loc2 = [];
       
                var floorplan_list = [];
                var floorplan = floorplan_a[g].markers;
                var ff = JSON.parse(floorplan);
                floorplan_list.push(ff);
                marker = JSON.parse(floorplan);
                
                
            for(var i=0;i<positioning.length;i++){
                var num = positioning[i].employee_id.toString();
                //alert("form 1-- "+emp_id);
                  var d = new Date(positioning[i].path_datetime);
                  //d.setMinutes(d.getMinutes()+d.getTimezoneOffset());
                  var ddate = d.getDate();
                  var dmonth = d.getMonth()+1;
                  var dyear = d.getFullYear();
                  var dhour = d.getHours();
                  var dminutes = d.getMinutes();
                  var dseconds = d.getSeconds();
                  
                  if(ddate < 10){
                      ddate = "0"+ddate;
                  }
                  if(dmonth < 10){
                      dmonth = "0"+dmonth;
                  }

                  if(dhour < 10){
                      dhour = "0"+dhour;
                  }
                  if(dminutes < 10){
                      dminutes = "0"+dminutes;
                  }
                  if(dseconds < 10){
                      dseconds = "0"+dseconds;
                  }

                  
                  //mhuman = JSON.parse(floorplan);
                  //alert("floorplan_list-- "+floorplan_list);
                  var mfloors = JSON.parse(floors);
                  //alert("floors-- "+mfloors);
                  mhuman = floorplan_list;
                  for(var j=0;j<maps.length;j++){
                      
                  for (k in mhuman[j]) {
                      
                  var newdate = ddate+"/"+dmonth+"/"+dyear+" "+dhour+":"+dminutes+":"+dseconds;

                if(num === emp_id){
                    
                      man = {
                          x: mhuman[j][k].latlngs.lat,
                          y: mhuman[j][k].latlngs.lng
                        };

                      

                    //alert(emp_id+"---"+dd[i].employee_id+"---"+mhuman[j][k].popup+"---"+dd[i].location_id);
                    if(positioning[i].location_id === mhuman[j][k].popup){   
                        test.push(mhuman[j][k].popup);
                        loc1.push(mhuman[j][k].latlngs.lat);
                        loc2.push(mhuman[j][k].latlngs.lng);
                        
                        sorted = test.filter(onlyUnique);
                        sorted_loc1 = loc1.filter(onlyUnique);
                        sorted_loc2 = loc2.filter(onlyUnique);
                        //alert("s="+sorted+" l1="+sorted_loc1+" l2="+sorted_loc2);
                        html += '<li><a href="#step-1"><span class="step_no">'+positioning[i].location_id+'</span><span class="step_descr">'+positioning[i].employee_id+'<br/><small>'+newdate+'</small></span></a></li>';
                        document.getElementById(mfloors.floor[j].floor_id).click();
                        document.getElementById("wizard_steps").innerHTML = html; 
                        }

                    }

                  }

            } 
        }
            
            //for(var jk=0;jk<maps.length;jk++){
                human1 = L.divIcon({
                          className: 'checkpoint-pin',
                          html: '<img src="/images/man.png">',
                          iconSize: [20, 20],
                          iconAnchor: [10, 10]
                        });
                        
            //alert("s="+sorted+" l1="+sorted_loc1+" l2="+sorted_loc2+" leh="+sorted.length);
                  for(var gk=0;gk<sorted.length;gk++){
                    var marker = L.marker([sorted_loc1[gk], sorted_loc2[gk]], {
                                icon: human1
                              });
                              
                             markers_play[g].addLayer(marker);
                             maps[g].addLayer(markers_play[g]);
                }
            //}
            }
        } else {

            for(var i=0;i<maps.length;i++){ 
                
                document.getElementById("wizard_steps").innerHTML = '';
                clearMapPlayback();
                pointlist = [];
                //markers.clearLayers();
                
            }

        }
      }
      
    function onlyUnique(value, index, self) { 
        return self.indexOf(value) === index;
        }
        
script.
    var socket = io();
    socket.on('tracking', function(rows) {
        var language = rows.language;
        clearMap();
        var employees = rows.employee;
        var floor_plan = rows.floor_plan;
        //var markers = [];
        var floors = rows.floors.replace(/&quot;/g, '"');
        for(var t=0;t<floor_plan.length;t++){
        var floorplan_list = [];
        
        //markers[t] = new L.FeatureGroup();
        var floorplan_id = floor_plan[t].floorplan_id;
        var floorplan = floor_plan[t].markers;
        var emp_no = 0;
        var emp_no_id = "no_emp"+floorplan_id;
        
        var ff = JSON.parse(floorplan);
        floorplan_list.push(ff);
        marker = JSON.parse(floorplan);
      for(var i=0;i<dd.length;i++){
                var num = dd[i].employee_id.toString();
                var name = dd[i].employee_name.toString();
                var d = new Date(dd[i].path_datetime);
                  //d.setMinutes(d.getMinutes()+d.getTimezoneOffset());
                var ddate = d.getDate();
                var dmonth = d.getMonth()+1;
                var dyear = d.getFullYear();
                var dhour = d.getHours();
                var dminutes = d.getMinutes();
                var dseconds = d.getSeconds();

                if(ddate < 10){
                    ddate = "0"+ddate;
                }
                if(dmonth < 10){
                    dmonth = "0"+dmonth;
                }

                if(dhour < 10){
                    dhour = "0"+dhour;
                }
                if(dminutes < 10){
                    dminutes = "0"+dminutes;
                }
                if(dseconds < 10){
                    dseconds = "0"+dseconds;
                }

                var mfloors = JSON.parse(floors);
                mhuman = floorplan_list;

                for(var j=0;j<maps.length;j++){
                for (k in mhuman[j]) {
                var newdate = ddate+"/"+dmonth+"/"+dyear+" "+dhour+":"+dminutes+":"+dseconds;

                var emp_loc_no = 0;
                if(dd[i].employee_location === mhuman[j][k].popup){
                emp_no++;
                emp_loc_no++;
                if (marker !== null && marker.length !== 0) {
                    for (h in marker) {
                    marks[i] = L.marker(marker[h].latlngs, marker[h].options).bindTooltip("<div><b>" + marker[h].popup + "</b>("+emp_loc_no+" 名员工)</div>",{direction:'top'});

                    maps[t].addLayer(marks[i]);

                    }
                    } else {
                    marker = [];
                    }
                }

                }
            }
            }
    
    if(language === 'en'){
    document.getElementById(emp_no_id).innerHTML = "("+emp_no+" employee)";
    }
    else{
    document.getElementById(emp_no_id).innerHTML = "("+emp_no+" 名员工)";  
    }
    }
    
        for (var i = 0; i < marker_g.length; i++ ) {
          marker_g[i].setMap(null);
        }
        marker_g.length = 0;


    var infoWindow = new google.maps.InfoWindow({maxWidth: 250});
    var contentString = [];
    for(var i=0;i<employees.length;i++){
        var d = new Date(employees[i].employee_time);
    //    d.setMinutes(d.getMinutes()+480);
        d.setMinutes(d.getMinutes()-480);
        var ddate = d.getDate();
        var dmonth = d.getMonth()+1;
        var dyear = d.getFullYear();
        var dhour = d.getHours();
        var dminutes = d.getMinutes();
        var dseconds = d.getSeconds();
        

        if(ddate < 10){
            ddate = "0"+ddate;
        }
        if(dmonth < 10){
            dmonth = "0"+dmonth;
        }

        if(dhour < 10){
            dhour = "0"+dhour;
        }
        if(dminutes < 10){
            dminutes = "0"+dminutes;
        }
        if(dseconds < 10){
            dseconds = "0"+dseconds;
        }

        var newdate;
        newdate = dyear+"-"+dmonth+"-"+ddate+" "+dhour+":"+dminutes+":"+dseconds;
        
                contentString[i] = '<ul class="list-unstyled">'+ 
                        '<li class="media event">'+
                            '<a class="pull-left">'+
                              '<img src="/'+employees[i].employee_image+'" height="40" width="40">'+
                            '</a>'+
                            '<div class="media-body">'+
                              '<a class="title" href="#">'+employees[i].employee_name+'</a>'+
                              '<p>最后的位置: '+newdate+'</p>'+
                              '</p>'+
                            '</div>'+
                          '</li></ul>';
                
                var partsOfStr = employees[i].employee_gps.split(',');
                var myLatLng = {lat: parseFloat(partsOfStr[1]), lng: parseFloat(partsOfStr[0])};
                //alert(myLatLng);
                marker_g[i] = new google.maps.Marker({
                    position: myLatLng,
                    icon: '/images/man2_1.png',
                    map: map_g,
                    title: 'test',
                    label: employees[i].employee_name,
                    });
                    
                    google.maps.event.addListener(marker_g[i], 'click', (function(marker, i) {
                    return function() {
                        infoWindow.setContent(contentString[i]);
                        infoWindow.open(map_g, marker_g[i]);
                    }
                })(marker, i));
                
                marker_g[i].setMap(map_g);
            }
    

    });
    
script.
    function laodPositioning()
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", "/get_positioning", false ); // false for synchronous request
        xmlHttp.send( null );
        return xmlHttp.responseText;
    }
    
    function loadFloorPlan()
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", "/get_floorplan", false ); // false for synchronous request
        xmlHttp.send( null );
        return xmlHttp.responseText;
    }
    
    function loadHistory()
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", "/get_history", false ); // false for synchronous request
        xmlHttp.send( null );
        return xmlHttp.responseText;
    }